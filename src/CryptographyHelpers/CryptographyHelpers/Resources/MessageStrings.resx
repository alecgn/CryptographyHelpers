<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Bytes.InvalidInputBytes" xml:space="preserve">
    <value>Input bytes cannot be null or empty.</value>
  </data>
  <data name="Cryptography.InvalidAESKey" xml:space="preserve">
    <value>Invalid AES key (null or wrong size).</value>
  </data>
  <data name="Decryption.DataDecryptionSuccess" xml:space="preserve">
    <value>Data succesfully decrypted.</value>
  </data>
  <data name="Decryption.FileDecryptionSuccess" xml:space="preserve">
    <value>File decrypted succesfully.</value>
  </data>
  <data name="Decryption.InputBytesRequired" xml:space="preserve">
    <value>Input bytes to decrypt required.</value>
  </data>
  <data name="Encryption.DataEncryptionSuccess" xml:space="preserve">
    <value>Data encrypted succesfully.</value>
  </data>
  <data name="Encryption.FileEncryptionSuccess" xml:space="preserve">
    <value>File encrypted succesfully.</value>
  </data>
  <data name="Encryption.InputBytesRequired" xml:space="preserve">
    <value>Input bytes to encrypt required.</value>
  </data>
  <data name="File.PathNotFound" xml:space="preserve">
    <value>File not found:</value>
  </data>
  <data name="File.SourceAndDestinationPathsEqual" xml:space="preserve">
    <value>Source and destination file paths cannot be equal.</value>
  </data>
  <data name="Hash.ComputeSuccess" xml:space="preserve">
    <value>Hash computed succesfully.</value>
  </data>
  <data name="Hash.DoesNotMatch" xml:space="preserve">
    <value>Input data and verification hash does not match.</value>
  </data>
  <data name="Hash.InputBytesRequired" xml:space="preserve">
    <value>Input bytes to compute hash required.</value>
  </data>
  <data name="Hash.InputStringRequired" xml:space="preserve">
    <value>Input string to compute hash required.</value>
  </data>
  <data name="Hash.Match" xml:space="preserve">
    <value>Input data and verification hash does match.</value>
  </data>
  <data name="Hash.VerificationHashBytesRequired" xml:space="preserve">
    <value>Verification hash bytes required.</value>
  </data>
  <data name="Hash.VerificationHashStringRequired" xml:space="preserve">
    <value>Verification hash string required.</value>
  </data>
  <data name="HMAC.ComputeSuccess" xml:space="preserve">
    <value>HMAC computed succesfully.</value>
  </data>
  <data name="HMAC.InputBytesRequired" xml:space="preserve">
    <value>Input bytes to compute/verify HMAC required.</value>
  </data>
  <data name="HMAC.InputKeyStringRequired" xml:space="preserve">
    <value>Input key string to compute/verify HMAC required.</value>
  </data>
  <data name="HMAC.InputStringRequired" xml:space="preserve">
    <value>Input string to compute/verify HMAC required.</value>
  </data>
  <data name="HMAC.VerificationHMACStringRequired" xml:space="preserve">
    <value>Verification HMAC string required.</value>
  </data>
  <data name="KeyDerivation.DerivationSuccess" xml:space="preserve">
    <value>Key derived succesfully.</value>
  </data>
  <data name="KeyDerivation.InvalidBytesRequested" xml:space="preserve">
    <value>Number of bytes requested from key derivation required (must be greater than 0).</value>
  </data>
  <data name="KeyDerivation.KeyBytesRequired" xml:space="preserve">
    <value>Input key bytes required for key verification.</value>
  </data>
  <data name="KeyDerivation.PasswordStringRequired" xml:space="preserve">
    <value>Input password string required for key derivation.</value>
  </data>
  <data name="Strings.InvalidBase64InputString" xml:space="preserve">
    <value>Invalid base64 input string.</value>
  </data>
  <data name="Strings.InvalidHexadecimalInputString" xml:space="preserve">
    <value>Invalid hexadecimal input string.</value>
  </data>
  <data name="Strings.InvalidInputString" xml:space="preserve">
    <value>Input string cannot be null, empty or white-space(s).</value>
  </data>
</root>